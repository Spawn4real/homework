# 1. Создать класс TrafficLight (светофор).
# определить у него один атрибут color (цвет) и метод running (запуск);
# атрибут реализовать как приватный;
# в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный;
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение;
# переключение между режимами должно осуществляться только в указанном порядке (красный, жёлтый, зелёный);
# проверить работу примера, создав экземпляр и вызвав описанный метод.
# Задачу можно усложнить, реализовав проверку порядка режимов. При его нарушении выводить соответствующее сообщение и завершать скрипт.


import time


class TrafficLight:
    __color = ('красный', 'желтый', 'зеленый')

    def running(self):
        while True:
            print(TrafficLight.__color[0])
            time.sleep(7)
            print(TrafficLight.__color[1])
            time.sleep(2)
            print(TrafficLight.__color[2])
            time.sleep(4)


a = TrafficLight()
a.running()


# 2. Реализовать класс Road (дорога).
# определить атрибуты: length (длина), width (ширина);
# значения атрибутов должны передаваться при создании экземпляра класса;
# атрибуты сделать защищёнными;
# определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;
# использовать формулу: длина * ширина * масса асфальта для покрытия одного кв. метра дороги асфальтом, толщиной в 1 см * число см толщины полотна;
# проверить работу метода.
# Например: 20 м*5000 м*25 кг*5 см = 12500 т.


class Road:
    def __init__(self, length, width):
        self._length = length
        self._width = width


    def mass_asphalt(self):
        count = int(self._length * self._width * 25 * 5 / 1000)
        result = f'{self._length}m * {self._width}m * {25}кг * {5}см / {1000} = {count}т'
        return result


a = Road(20, 5000)
print(a.mass_asphalt())


# 3. Реализовать базовый класс Worker (работник).
# определить атрибуты: name, surname, position (должность), income (доход);
# последний атрибут должен быть защищённым и ссылаться на словарь, содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus};
# создать класс Position (должность) на базе класса Worker;
# в классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учётом премии (get_total_income);
# проверить работу примера на реальных данных: создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров.


class Worker:
    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {"wage": wage, "bonus": bonus}


class Position(Worker):
    def get_full_name(self):
        return f'{self.surname} {self.name}'


    def get_total_income(self):
        return f'{self._income["wage"] + self._income["bonus"]}'


a = Position('Иван', 'Сидоров', 'Повар', 1000, 500)
print(a.name)
print(a.surname)
print(a.position)
print(a._income['wage'])
print(a._income['bonus'])
print(a.get_full_name())
print(a.get_total_income())


# 4. Реализуйте базовый класс Car.
# у класса должны быть следующие атрибуты: speed, color, name, is_police(булево). А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда);
# опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar;
# добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля;
# для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
#
# Создайте экземпляры классов, передайте значения атрибутов. Выполните доступ к атрибутам, выведите результат. Вызовите методы и покажите результат.


class Car:
    is_police = False

    def __init__(self, name, color, speed,):
        self.speed = speed
        self.color = color
        self.name = name

    def go(self):
        return f'Машина поехала вперед'

    def stop(self):
        return f'Машина остановилась'

    def turn(self, direction):
        return f'Машина повернула {direction}'

    def show_speed(self):
        return f'Ваша скорость: {self.speed}км\ч'


class TownCar(Car):
    def show_speed(self):
        if self.speed > 60:
            return f'Вы превысили максимально допустимую скорость'
        else:
            return f'Ваша скорость: {self.speed}км\ч'


class SportCar(Car):

    def sport_mode(self):
        return f'У вас спорткар'


class WorkCar(Car):
    def show_speed(self):
        if self.speed > 40:
            return f'Вы превысили максимально допустимую скорость'
        else:
            return f'Ваша скорость: {self.speed}км\ч'


class PoliceCar(Car):
    is_police = True


police = PoliceCar('Reno', 'Белый', 50)
print(police.is_police)
print(police.show_speed())
print(police.turn('Направо'))
print("---------------------")
town_car = TownCar('VolgaBus', 'Красный', 80)
print(town_car.is_police)
print(town_car.show_speed())
print(town_car.turn('Налево'))
print("---------------------")
sport_car = SportCar('Ferrari', 'Чёрный', 250)
print(sport_car.name)
print(sport_car.sport_mode())


# 5. Реализовать класс Stationery (канцелярская принадлежность).
# определить в нём атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
# создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
# в каждом классе реализовать переопределение метода draw. Для каждого класса метод должен выводить уникальное сообщение;
# создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.


class Stationery:
    def __init__(self, title):
        self.title = title

    def draw(self):
        return f"Запуск отрисовки"


class Pen(Stationery):
    def draw(self):
        print('Пишем ручкой')


class Pencil(Stationery):
    def draw(self):
        print('Черчим карандашом')


class Handle(Stationery):
    def draw(self):
        print('Выделяем маркером')


brush = Stationery('Brauberg')
print(brush.title)
brush.draw()
pen = Pen('Stabilo')
print(pen.title)
pen.draw()
pencil = Pencil('BIC')
print(pencil.title)
pencil.draw()
handle = Handle('Erich Krause')
print(handle.title)
handle.draw()

