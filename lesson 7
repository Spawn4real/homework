# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
# | 31 22 |
# | 37 43 |
# | 51 86 |
# 
# | 3 5 32 |
# | 2 4 6 |
# | -1 64 -8 |
# 
# | 3 5 8 3 |
# | 8 3 7 1 |


class Matrix:
    def __init__(self, my_list):
        self.matrix = my_list

    def __str__(self):
        self.str = ''
        for i in self.matrix:
            self.str += f'{i}\n'
        return self.str

    def __add__(self, other):
        self.sum = ([[] for i in range(len(self.matrix))])
        for i in range(len(self.matrix)):
            self.elem = []
            for e in range(len(self.matrix[i])):
                self.elem.append(self.matrix[i][e] + other.matrix[i][e])
            self.sum[i] = self.elem
        return Matrix(self.sum)


a = Matrix([[3, 5, 32], [2, 4, 6], [-1, 64, -8]])
print(a)
b = Matrix([[3, 5, 9], [3, 8, 3], [7, 1, 31]])
print(b)
print(a + b)


# 2. Реализовать проект расчёта суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта — одежда, которая может иметь определённое название. К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма(2*H + 0.3). Проверить работу этих методов на реальных данных.
# Выполнить общий подсчёт расхода ткани. Проверить на практике полученные на этом уроке знания. Реализовать абстрактные классы для основных классов проекта и проверить работу декоратора @property.


class Textile:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_square_coat(self):
        return str(f'Площадь на пальто: {self.width / 6.5 + 0.5} m')

    def get_square_jacket(self):
        return str(f'Площадь на пиджак: {self.height * 2 + 0.3} m')

    @property
    def get_square_all(self):
        return str(f'Общая площадь ткани: {(self.width / 6.5 + 0.5) + (self.height * 2 + 0.3)} m')


c = Textile(26, 100)
j = Textile(26, 100)
print(c.get_square_coat())
print(j.get_square_jacket())
print(c.get_square_all)


# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.


class Cell:
    def __init__(self, integer=0):
        self.integer = integer

    def __add__(self, other):
        return Cell(self.integer + other.integer)

    def __sub__(self, other):
        return Cell(self.integer - other.integer)

    def __mul__(self, other):
        return Cell(self.integer * other.integer)

    def __floordiv__(self, other):
        return Cell(self.integer // other.integer)

    def __truediv__(self, other):
        return Cell(self.integer // other.integer)

    def __str__(self):
        if self.integer >= 0:
            return f'{self.integer}'
        else:
            return f'Operation is not possible'

    def make_order(self, cells_in_row):
        self.s = ''
        self.cells_in_row = cells_in_row
        for i in range(1, self.integer + 1):
            if i % self.cells_in_row == 0:
                if i == self.integer:
                    self.s += '*'
                else:
                    self.s += '*\\n'
            else:
                self.s += '*'
        return self.s


a = Cell(20)
b = Cell(30)
print(a + b)
print(a - b)
print(b - a)
print(b * a)
print(b / a)
print(b // a)
print(a.make_order(5))
print(a.cells_in_row)

